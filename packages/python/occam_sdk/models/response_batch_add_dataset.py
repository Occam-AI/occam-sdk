# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from occam_sdk.models.connection_status import ConnectionStatus
from typing import Optional, Set
from typing_extensions import Self

class ResponseBatchAddDataset(BaseModel):
    """
    ResponseBatchAddDataset
    """ # noqa: E501
    dataset_name: StrictStr
    content: Optional[Dict[str, Any]] = None
    address_summary: Optional[StrictStr] = None
    connection_status: Optional[ConnectionStatus] = None
    error: Optional[StrictStr] = None
    uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["dataset_name", "content", "address_summary", "connection_status", "error", "uuid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponseBatchAddDataset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if content (nullable) is None
        # and model_fields_set contains the field
        if self.content is None and "content" in self.model_fields_set:
            _dict['content'] = None

        # set to None if address_summary (nullable) is None
        # and model_fields_set contains the field
        if self.address_summary is None and "address_summary" in self.model_fields_set:
            _dict['address_summary'] = None

        # set to None if connection_status (nullable) is None
        # and model_fields_set contains the field
        if self.connection_status is None and "connection_status" in self.model_fields_set:
            _dict['connection_status'] = None

        # set to None if error (nullable) is None
        # and model_fields_set contains the field
        if self.error is None and "error" in self.model_fields_set:
            _dict['error'] = None

        # set to None if uuid (nullable) is None
        # and model_fields_set contains the field
        if self.uuid is None and "uuid" in self.model_fields_set:
            _dict['uuid'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponseBatchAddDataset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dataset_name": obj.get("dataset_name"),
            "content": obj.get("content"),
            "address_summary": obj.get("address_summary"),
            "connection_status": obj.get("connection_status"),
            "error": obj.get("error"),
            "uuid": obj.get("uuid")
        })
        return _obj
