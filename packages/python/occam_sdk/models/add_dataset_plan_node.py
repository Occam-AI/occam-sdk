# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AddDatasetPlanNode(BaseModel):
    """
    AddDatasetPlanNode
    """ # noqa: E501
    name: StrictStr
    role_description: StrictStr
    node_id: Optional[StrictInt] = None
    data_source_access_name: Optional[StrictStr] = None
    is_proposed: Optional[StrictBool] = False
    plan_id: StrictStr
    type: Optional[Any] = None
    __properties: ClassVar[List[str]] = ["name", "role_description", "node_id", "data_source_access_name", "is_proposed", "plan_id", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddDatasetPlanNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if node_id (nullable) is None
        # and model_fields_set contains the field
        if self.node_id is None and "node_id" in self.model_fields_set:
            _dict['node_id'] = None

        # set to None if data_source_access_name (nullable) is None
        # and model_fields_set contains the field
        if self.data_source_access_name is None and "data_source_access_name" in self.model_fields_set:
            _dict['data_source_access_name'] = None

        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddDatasetPlanNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "role_description": obj.get("role_description"),
            "node_id": obj.get("node_id"),
            "data_source_access_name": obj.get("data_source_access_name"),
            "is_proposed": obj.get("is_proposed") if obj.get("is_proposed") is not None else False,
            "plan_id": obj.get("plan_id"),
            "type": obj.get("type")
        })
        return _obj
