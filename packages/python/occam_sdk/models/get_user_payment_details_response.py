# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GetUserPaymentDetailsResponse(BaseModel):
    """
    GetUserPaymentDetailsResponse
    """ # noqa: E501
    total_transactions: StrictInt
    successful_transactions: StrictInt
    failed_transactions: StrictInt
    last_transaction_date: Optional[datetime] = None
    last_transaction_was_successful: Optional[StrictBool] = None
    topup_suggested_amount: Optional[StrictInt] = None
    default_payment_method_configured: StrictBool
    auto_recharge_active: StrictBool
    auto_recharge_threshold_amount: Optional[StrictInt] = None
    auto_recharge_bring_balance_up_to_amount: Optional[StrictInt] = None
    available_balance: Optional[StrictInt] = None
    used_balance: Optional[StrictInt] = None
    available_credits: Optional[StrictInt] = None
    used_credits: Optional[StrictInt] = None
    free_credits_announcement_active: Optional[StrictBool] = None
    auto_recharge_failed_announcement_active: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["total_transactions", "successful_transactions", "failed_transactions", "last_transaction_date", "last_transaction_was_successful", "topup_suggested_amount", "default_payment_method_configured", "auto_recharge_active", "auto_recharge_threshold_amount", "auto_recharge_bring_balance_up_to_amount", "available_balance", "used_balance", "available_credits", "used_credits", "free_credits_announcement_active", "auto_recharge_failed_announcement_active"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetUserPaymentDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if last_transaction_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_transaction_date is None and "last_transaction_date" in self.model_fields_set:
            _dict['last_transaction_date'] = None

        # set to None if last_transaction_was_successful (nullable) is None
        # and model_fields_set contains the field
        if self.last_transaction_was_successful is None and "last_transaction_was_successful" in self.model_fields_set:
            _dict['last_transaction_was_successful'] = None

        # set to None if topup_suggested_amount (nullable) is None
        # and model_fields_set contains the field
        if self.topup_suggested_amount is None and "topup_suggested_amount" in self.model_fields_set:
            _dict['topup_suggested_amount'] = None

        # set to None if auto_recharge_threshold_amount (nullable) is None
        # and model_fields_set contains the field
        if self.auto_recharge_threshold_amount is None and "auto_recharge_threshold_amount" in self.model_fields_set:
            _dict['auto_recharge_threshold_amount'] = None

        # set to None if auto_recharge_bring_balance_up_to_amount (nullable) is None
        # and model_fields_set contains the field
        if self.auto_recharge_bring_balance_up_to_amount is None and "auto_recharge_bring_balance_up_to_amount" in self.model_fields_set:
            _dict['auto_recharge_bring_balance_up_to_amount'] = None

        # set to None if available_balance (nullable) is None
        # and model_fields_set contains the field
        if self.available_balance is None and "available_balance" in self.model_fields_set:
            _dict['available_balance'] = None

        # set to None if used_balance (nullable) is None
        # and model_fields_set contains the field
        if self.used_balance is None and "used_balance" in self.model_fields_set:
            _dict['used_balance'] = None

        # set to None if available_credits (nullable) is None
        # and model_fields_set contains the field
        if self.available_credits is None and "available_credits" in self.model_fields_set:
            _dict['available_credits'] = None

        # set to None if used_credits (nullable) is None
        # and model_fields_set contains the field
        if self.used_credits is None and "used_credits" in self.model_fields_set:
            _dict['used_credits'] = None

        # set to None if free_credits_announcement_active (nullable) is None
        # and model_fields_set contains the field
        if self.free_credits_announcement_active is None and "free_credits_announcement_active" in self.model_fields_set:
            _dict['free_credits_announcement_active'] = None

        # set to None if auto_recharge_failed_announcement_active (nullable) is None
        # and model_fields_set contains the field
        if self.auto_recharge_failed_announcement_active is None and "auto_recharge_failed_announcement_active" in self.model_fields_set:
            _dict['auto_recharge_failed_announcement_active'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetUserPaymentDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "total_transactions": obj.get("total_transactions"),
            "successful_transactions": obj.get("successful_transactions"),
            "failed_transactions": obj.get("failed_transactions"),
            "last_transaction_date": obj.get("last_transaction_date"),
            "last_transaction_was_successful": obj.get("last_transaction_was_successful"),
            "topup_suggested_amount": obj.get("topup_suggested_amount"),
            "default_payment_method_configured": obj.get("default_payment_method_configured"),
            "auto_recharge_active": obj.get("auto_recharge_active"),
            "auto_recharge_threshold_amount": obj.get("auto_recharge_threshold_amount"),
            "auto_recharge_bring_balance_up_to_amount": obj.get("auto_recharge_bring_balance_up_to_amount"),
            "available_balance": obj.get("available_balance"),
            "used_balance": obj.get("used_balance"),
            "available_credits": obj.get("available_credits"),
            "used_credits": obj.get("used_credits"),
            "free_credits_announcement_active": obj.get("free_credits_announcement_active"),
            "auto_recharge_failed_announcement_active": obj.get("auto_recharge_failed_announcement_active")
        })
        return _obj
