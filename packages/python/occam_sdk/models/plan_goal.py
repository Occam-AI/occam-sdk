# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from occam_sdk.models.occam_llm_message import OccamLLMMessage
from typing import Optional, Set
from typing_extensions import Self

class PlanGoal(BaseModel):
    """
    PlanGoal
    """ # noqa: E501
    name: StrictStr
    is_name_user_generated: Optional[StrictBool] = True
    chat_messages: Optional[List[OccamLLMMessage]] = None
    user_id: Optional[StrictInt] = None
    category: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    params: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["name", "is_name_user_generated", "chat_messages", "user_id", "category", "id", "params"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PlanGoal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in chat_messages (list)
        _items = []
        if self.chat_messages:
            for _item_chat_messages in self.chat_messages:
                if _item_chat_messages:
                    _items.append(_item_chat_messages.to_dict())
            _dict['chat_messages'] = _items
        # set to None if chat_messages (nullable) is None
        # and model_fields_set contains the field
        if self.chat_messages is None and "chat_messages" in self.model_fields_set:
            _dict['chat_messages'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        # set to None if id (nullable) is None
        # and model_fields_set contains the field
        if self.id is None and "id" in self.model_fields_set:
            _dict['id'] = None

        # set to None if params (nullable) is None
        # and model_fields_set contains the field
        if self.params is None and "params" in self.model_fields_set:
            _dict['params'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PlanGoal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "is_name_user_generated": obj.get("is_name_user_generated") if obj.get("is_name_user_generated") is not None else True,
            "chat_messages": [OccamLLMMessage.from_dict(_item) for _item in obj["chat_messages"]] if obj.get("chat_messages") is not None else None,
            "user_id": obj.get("user_id"),
            "category": obj.get("category"),
            "id": obj.get("id"),
            "params": obj.get("params")
        })
        return _obj
