# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from occam_sdk.models.resource_strictness import ResourceStrictness
from typing import Optional, Set
from typing_extensions import Self

class AddDataSourceRequest(BaseModel):
    """
    AddDataSourceRequest
    """ # noqa: E501
    instance_display_name: StrictStr
    needs_credentials: StrictBool
    use_credential_as_default: StrictBool
    credential_uuid: Optional[StrictStr] = None
    resource_type: StrictStr
    address: Dict[str, Any]
    strictness: ResourceStrictness
    description: Optional[StrictStr] = None
    allowed_user_uuids: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["instance_display_name", "needs_credentials", "use_credential_as_default", "credential_uuid", "resource_type", "address", "strictness", "description", "allowed_user_uuids"]

    @field_validator('resource_type')
    def resource_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['AdhocDatasetsDataSource', 'PGDataSource', 'WarehouseDataSource', 'PGVectorDataSource', 'PineconeVectorDataSource', 'RAMPDataSource', 'GaiaDataSource', 'RESTDataSource', 'DropboxDataSource', 'GCSDataSource', 'GoogleDriveDataSource', 'LocalFolderDataSource', 'S3DataSource', 'AshbyDataSource', 'DeelDataSource', 'GithubDataSource']):
            raise ValueError("must be one of enum values ('AdhocDatasetsDataSource', 'PGDataSource', 'WarehouseDataSource', 'PGVectorDataSource', 'PineconeVectorDataSource', 'RAMPDataSource', 'GaiaDataSource', 'RESTDataSource', 'DropboxDataSource', 'GCSDataSource', 'GoogleDriveDataSource', 'LocalFolderDataSource', 'S3DataSource', 'AshbyDataSource', 'DeelDataSource', 'GithubDataSource')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddDataSourceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if credential_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.credential_uuid is None and "credential_uuid" in self.model_fields_set:
            _dict['credential_uuid'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddDataSourceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "instance_display_name": obj.get("instance_display_name"),
            "needs_credentials": obj.get("needs_credentials"),
            "use_credential_as_default": obj.get("use_credential_as_default"),
            "credential_uuid": obj.get("credential_uuid"),
            "resource_type": obj.get("resource_type"),
            "address": obj.get("address"),
            "strictness": obj.get("strictness"),
            "description": obj.get("description"),
            "allowed_user_uuids": obj.get("allowed_user_uuids")
        })
        return _obj
