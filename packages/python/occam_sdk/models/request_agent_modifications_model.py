# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from occam_sdk.models.modifications_batch import ModificationsBatch
from occam_sdk.models.user_message_model import UserMessageModel
from typing import Optional, Set
from typing_extensions import Self

class RequestAgentModificationsModel(BaseModel):
    """
    This is the model that is sent to the planner to request feedback including incorporating user modifications, validating them then making suggestions for changes.
    """ # noqa: E501
    modifications_batch: Optional[ModificationsBatch] = None
    user_message: Optional[UserMessageModel] = None
    __properties: ClassVar[List[str]] = ["modifications_batch", "user_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestAgentModificationsModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of modifications_batch
        if self.modifications_batch:
            _dict['modifications_batch'] = self.modifications_batch.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user_message
        if self.user_message:
            _dict['user_message'] = self.user_message.to_dict()
        # set to None if modifications_batch (nullable) is None
        # and model_fields_set contains the field
        if self.modifications_batch is None and "modifications_batch" in self.model_fields_set:
            _dict['modifications_batch'] = None

        # set to None if user_message (nullable) is None
        # and model_fields_set contains the field
        if self.user_message is None and "user_message" in self.model_fields_set:
            _dict['user_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestAgentModificationsModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "modifications_batch": ModificationsBatch.from_dict(obj["modifications_batch"]) if obj.get("modifications_batch") is not None else None,
            "user_message": UserMessageModel.from_dict(obj["user_message"]) if obj.get("user_message") is not None else None
        })
        return _obj
