# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from occam_sdk.models.agent_role import AgentRole
from occam_sdk.models.agent_type import AgentType
from typing import Optional, Set
from typing_extensions import Self

class AgentIdentityResponse(BaseModel):
    """
    AgentIdentityResponse
    """ # noqa: E501
    name: StrictStr
    first_name: Optional[StrictStr] = None
    last_name: Optional[StrictStr] = None
    base_agent: Optional[Any]
    type: AgentType
    role: AgentRole
    role_embedding_vector: Optional[List[Union[StrictFloat, StrictInt]]] = None
    short_role_description: Optional[StrictStr] = None
    long_role_description: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    slack_handle: Optional[StrictStr] = None
    user_id: Optional[StrictInt] = None
    prompt: Optional[StrictStr] = None
    params: Optional[Dict[str, Any]] = None
    dynamic_spec: Optional[Any] = None
    is_base_agent: Optional[StrictBool] = False
    params_model_schema: Dict[str, Any]
    inputs_model_schema: Dict[str, Any]
    outputs_model_schema: Dict[str, Any]
    __properties: ClassVar[List[str]] = ["name", "first_name", "last_name", "base_agent", "type", "role", "role_embedding_vector", "short_role_description", "long_role_description", "email", "slack_handle", "user_id", "prompt", "params", "dynamic_spec", "is_base_agent", "params_model_schema", "inputs_model_schema", "outputs_model_schema"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentIdentityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of dynamic_spec
        if self.dynamic_spec:
            _dict['dynamic_spec'] = self.dynamic_spec.to_dict()
        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['first_name'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['last_name'] = None

        # set to None if base_agent (nullable) is None
        # and model_fields_set contains the field
        if self.base_agent is None and "base_agent" in self.model_fields_set:
            _dict['base_agent'] = None

        # set to None if role_embedding_vector (nullable) is None
        # and model_fields_set contains the field
        if self.role_embedding_vector is None and "role_embedding_vector" in self.model_fields_set:
            _dict['role_embedding_vector'] = None

        # set to None if short_role_description (nullable) is None
        # and model_fields_set contains the field
        if self.short_role_description is None and "short_role_description" in self.model_fields_set:
            _dict['short_role_description'] = None

        # set to None if long_role_description (nullable) is None
        # and model_fields_set contains the field
        if self.long_role_description is None and "long_role_description" in self.model_fields_set:
            _dict['long_role_description'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if slack_handle (nullable) is None
        # and model_fields_set contains the field
        if self.slack_handle is None and "slack_handle" in self.model_fields_set:
            _dict['slack_handle'] = None

        # set to None if user_id (nullable) is None
        # and model_fields_set contains the field
        if self.user_id is None and "user_id" in self.model_fields_set:
            _dict['user_id'] = None

        # set to None if prompt (nullable) is None
        # and model_fields_set contains the field
        if self.prompt is None and "prompt" in self.model_fields_set:
            _dict['prompt'] = None

        # set to None if dynamic_spec (nullable) is None
        # and model_fields_set contains the field
        if self.dynamic_spec is None and "dynamic_spec" in self.model_fields_set:
            _dict['dynamic_spec'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentIdentityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "base_agent": obj.get("base_agent"),
            "type": obj.get("type"),
            "role": obj.get("role"),
            "role_embedding_vector": obj.get("role_embedding_vector"),
            "short_role_description": obj.get("short_role_description"),
            "long_role_description": obj.get("long_role_description"),
            "email": obj.get("email"),
            "slack_handle": obj.get("slack_handle"),
            "user_id": obj.get("user_id"),
            "prompt": obj.get("prompt"),
            "params": obj.get("params"),
            "dynamic_spec": AnyOf.from_dict(obj["dynamic_spec"]) if obj.get("dynamic_spec") is not None else None,
            "is_base_agent": obj.get("is_base_agent") if obj.get("is_base_agent") is not None else False,
            "params_model_schema": obj.get("params_model_schema"),
            "inputs_model_schema": obj.get("inputs_model_schema"),
            "outputs_model_schema": obj.get("outputs_model_schema")
        })
        return _obj
