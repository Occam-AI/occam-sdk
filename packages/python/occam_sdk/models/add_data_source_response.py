# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from occam_sdk.models.basic_field_info import BasicFieldInfo
from occam_sdk.models.connection_status import ConnectionStatus
from occam_sdk.models.get_dataset_response import GetDatasetResponse
from occam_sdk.models.resource_strictness import ResourceStrictness
from typing import Optional, Set
from typing_extensions import Self

class AddDataSourceResponse(BaseModel):
    """
    AddDataSourceResponse
    """ # noqa: E501
    uuid: StrictStr
    kind: StrictStr
    kind_display_name: StrictStr
    instance_display_name: Optional[StrictStr] = None
    short_description: StrictStr
    long_description: StrictStr
    icon: StrictStr
    category: StrictStr
    category_rank: StrictInt
    address: Dict[str, Any]
    needs_credentials: StrictBool
    is_datasource: StrictBool
    strictness: ResourceStrictness
    is_connected: StrictBool
    connection_status: Optional[ConnectionStatus]
    subtool_kinds: Optional[List[StrictStr]] = None
    connection_uuid: Optional[StrictStr] = None
    is_template: Optional[StrictBool] = False
    is_scannable: Optional[StrictBool] = False
    is_template_instance: Optional[StrictBool] = False
    credential_uuid: Optional[StrictStr] = None
    datasets: Optional[List[GetDatasetResponse]] = None
    input_fields: Optional[List[BasicFieldInfo]] = None
    params_model: Optional[Dict[str, Any]] = None
    output_fields: Optional[List[BasicFieldInfo]] = None
    __properties: ClassVar[List[str]] = ["uuid", "kind", "kind_display_name", "instance_display_name", "short_description", "long_description", "icon", "category", "category_rank", "address", "needs_credentials", "is_datasource", "strictness", "is_connected", "connection_status", "subtool_kinds", "connection_uuid", "is_template", "is_scannable", "is_template_instance", "credential_uuid", "datasets", "input_fields", "params_model", "output_fields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AddDataSourceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in datasets (list)
        _items = []
        if self.datasets:
            for _item_datasets in self.datasets:
                if _item_datasets:
                    _items.append(_item_datasets.to_dict())
            _dict['datasets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in input_fields (list)
        _items = []
        if self.input_fields:
            for _item_input_fields in self.input_fields:
                if _item_input_fields:
                    _items.append(_item_input_fields.to_dict())
            _dict['input_fields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in output_fields (list)
        _items = []
        if self.output_fields:
            for _item_output_fields in self.output_fields:
                if _item_output_fields:
                    _items.append(_item_output_fields.to_dict())
            _dict['output_fields'] = _items
        # set to None if instance_display_name (nullable) is None
        # and model_fields_set contains the field
        if self.instance_display_name is None and "instance_display_name" in self.model_fields_set:
            _dict['instance_display_name'] = None

        # set to None if connection_status (nullable) is None
        # and model_fields_set contains the field
        if self.connection_status is None and "connection_status" in self.model_fields_set:
            _dict['connection_status'] = None

        # set to None if subtool_kinds (nullable) is None
        # and model_fields_set contains the field
        if self.subtool_kinds is None and "subtool_kinds" in self.model_fields_set:
            _dict['subtool_kinds'] = None

        # set to None if connection_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.connection_uuid is None and "connection_uuid" in self.model_fields_set:
            _dict['connection_uuid'] = None

        # set to None if credential_uuid (nullable) is None
        # and model_fields_set contains the field
        if self.credential_uuid is None and "credential_uuid" in self.model_fields_set:
            _dict['credential_uuid'] = None

        # set to None if datasets (nullable) is None
        # and model_fields_set contains the field
        if self.datasets is None and "datasets" in self.model_fields_set:
            _dict['datasets'] = None

        # set to None if input_fields (nullable) is None
        # and model_fields_set contains the field
        if self.input_fields is None and "input_fields" in self.model_fields_set:
            _dict['input_fields'] = None

        # set to None if params_model (nullable) is None
        # and model_fields_set contains the field
        if self.params_model is None and "params_model" in self.model_fields_set:
            _dict['params_model'] = None

        # set to None if output_fields (nullable) is None
        # and model_fields_set contains the field
        if self.output_fields is None and "output_fields" in self.model_fields_set:
            _dict['output_fields'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AddDataSourceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "uuid": obj.get("uuid"),
            "kind": obj.get("kind"),
            "kind_display_name": obj.get("kind_display_name"),
            "instance_display_name": obj.get("instance_display_name"),
            "short_description": obj.get("short_description"),
            "long_description": obj.get("long_description"),
            "icon": obj.get("icon"),
            "category": obj.get("category"),
            "category_rank": obj.get("category_rank"),
            "address": obj.get("address"),
            "needs_credentials": obj.get("needs_credentials"),
            "is_datasource": obj.get("is_datasource"),
            "strictness": obj.get("strictness"),
            "is_connected": obj.get("is_connected"),
            "connection_status": obj.get("connection_status"),
            "subtool_kinds": obj.get("subtool_kinds"),
            "connection_uuid": obj.get("connection_uuid"),
            "is_template": obj.get("is_template") if obj.get("is_template") is not None else False,
            "is_scannable": obj.get("is_scannable") if obj.get("is_scannable") is not None else False,
            "is_template_instance": obj.get("is_template_instance") if obj.get("is_template_instance") is not None else False,
            "credential_uuid": obj.get("credential_uuid"),
            "datasets": [GetDatasetResponse.from_dict(_item) for _item in obj["datasets"]] if obj.get("datasets") is not None else None,
            "input_fields": [BasicFieldInfo.from_dict(_item) for _item in obj["input_fields"]] if obj.get("input_fields") is not None else None,
            "params_model": obj.get("params_model"),
            "output_fields": [BasicFieldInfo.from_dict(_item) for _item in obj["output_fields"]] if obj.get("output_fields") is not None else None
        })
        return _obj
