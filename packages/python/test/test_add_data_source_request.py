# coding: utf-8

"""
    Occam AI's public API

    API exposing Occam AI's planning, execution and supervision capabilities.

    The version of the OpenAPI document: 6.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from occam_sdk.models.add_data_source_request import AddDataSourceRequest

class TestAddDataSourceRequest(unittest.TestCase):
    """AddDataSourceRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AddDataSourceRequest:
        """Test AddDataSourceRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AddDataSourceRequest`
        """
        model = AddDataSourceRequest()
        if include_optional:
            return AddDataSourceRequest(
                instance_display_name = '',
                needs_credentials = True,
                use_credential_as_default = True,
                credential_uuid = '',
                resource_type = 'AdhocDatasetsDataSource',
                address = occam_sdk.models.address.Address(),
                strictness = '0',
                description = '',
                allowed_user_uuids = [
                    ''
                    ]
            )
        else:
            return AddDataSourceRequest(
                instance_display_name = '',
                needs_credentials = True,
                use_credential_as_default = True,
                resource_type = 'AdhocDatasetsDataSource',
                address = occam_sdk.models.address.Address(),
                strictness = '0',
        )
        """

    def testAddDataSourceRequest(self):
        """Test AddDataSourceRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
